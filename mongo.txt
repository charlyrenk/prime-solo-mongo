// 1. Create a collection named orders.
db.createCollection('orders');
// 2. Insert at least 3 documents that represent orders. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02
db.orders.insert({orderDate: new Date("2017-02-03"), orderTotal: "134.00", lineItems: [{unitPrice: 15.00, quantity: 4, productName: 'Rulers'}]});
db.orders.insert({orderDate: new Date("2017-04-04"), orderTotal: "230.00", lineItems: [{unitPrice: 34.45, quantity: 55, productName: 'Pickles'}]});
db.orders.insert({orderDate: new Date("2017-01-02"), orderTotal: "500.00", lineItems: [{unitPrice: 50.00, quantity: 10, productName: 'Chair'}]});
// 3. Find all orders and make them look pretty.
db.orders.find().pretty();
// 4. Find all orders with an orderDate that is after 1/31/2017.
db.orders.find({orderDate: {$gt: ISODate('2017-01-31')}}).pretty();
// 5. Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
db.orders.update({_id: ObjectId("599ef88bcf2cf3d33c19d750")},{$set:{orderTotal: 63.00 }});
// 6. Add another lineItem to the order from 4/4/2017
db.orders.update({_id: ObjectId("599efa13cf2cf3d33c19d751")},{$push:{lineItems:{unitePrice: 23.34, quantity: 5, productName: 'Jelly'}}});
// 7. Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
db.orders.update({_id: ObjectId("599efa77cf2cf3d33c19d752")},{$set:{'lineItems.0.productName': 
'transistor radio', 'lineItems.0.quantity': 2}});
// 8. Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $and
db.collection('orders').find({$and: [{orderTotal: {$gt: 2}}, {orderTotal: {$lt: 10}}]});
